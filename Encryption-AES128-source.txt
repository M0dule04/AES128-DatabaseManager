unit Security;

interface
  uses
    Sysutils,Windows,Dialogs, Messages,classes, Math, IOUtils, ClipBrd,UItypes;

  type
    TCustom = Class
    private
      function ByteEncrypt(Buffer : Tbytes; pos : integer) : TBytes;
      function ByteDecrypt(Buffer : Tbytes; pos : integer) : Tbytes;
    public
      function Encrypt(sInput : string; sKey : string) : string; Overload;
      function Encrypt(Input : TBytes) : TBytes; Overload;
      function Decrypt(sInput : string; sKey : string) : string; Overload;
      function Decrypt(Input : TBytes) : TBytes; Overload;

      Procedure FileEncrypt(sFileName : string);
      procedure FileDecrpyt(sFileName : string);
    End;

    TAES = class
    private
    {$Region 'Aes encrypt methods'}
      procedure GenKey(var Key : TBytes);
      procedure ShiftRows(var State : TBytes);
      procedure MixColoms(var State : TBytes);
      procedure SubBytes(var State : TBytes);
      procedure AddPadding(var Input : TBytes);
      procedure HideKey(var Encoded : TBytes; var Key : TBytes);
    {$Endregion}
    {$Region 'AES Decrypt methods'}
      procedure InvMixColumns(var State : Tbytes);
      procedure InvShiftRows(var State : Tbytes);
      procedure InvSubBytes(var State : Tbytes);
      procedure RemovePadding(var State : Tbytes);
      Procedure FindKey(var Input, Key: Tbytes);
    {$Endregion}
    {$Region 'AES General methods'}

      procedure ReadFile(sFileName : string; var arrBytes : Tbytes);
      procedure WriteFile(sFileName : string; var arrBytes : Tbytes);
      Procedure ExpandKey(var Key : TBytes; var ExpandedKey : TBytes);
      procedure ExpandKeySched(var Word : Tbytes; iRound : Byte);
      Procedure AddRoundKey(var State : TBytes; RoundKey : array of byte; iRound : integer);

       // array[I] = SBOX[array[I]]
      const SBOX : Array[0..255] of byte =
        ( $63, $7c, $77, $7b, $f2, $6b, $6f, $c5, $30, $01, $67, $2b, $fe, $d7, $ab, $76,
          $ca, $82, $c9, $7d, $fa, $59, $47, $f0, $ad, $d4, $a2, $af, $9c, $a4, $72, $c0,
          $b7, $fd, $93, $26, $36, $3f, $f7, $cc, $34, $a5, $e5, $f1, $71, $d8, $31, $15,
          $04, $c7, $23, $c3, $18, $96, $05, $9a, $07, $12, $80, $e2, $eb, $27, $b2, $75,
          $09, $83, $2c, $1a, $1b, $6e, $5a, $a0, $52, $3b, $d6, $b3, $29, $e3, $2f, $84,
          $53, $d1, $00, $ed, $20, $fc, $b1, $5b, $6a, $cb, $be, $39, $4a, $4c, $58, $cf,
          $d0, $ef, $aa, $fb, $43, $4d, $33, $85, $45, $f9, $02, $7f, $50, $3c, $9f, $a8,
          $51, $a3, $40, $8f, $92, $9d, $38, $f5, $bc, $b6, $da, $21, $10, $ff, $f3, $d2,
          $cd, $0c, $13, $ec, $5f, $97, $44, $17, $c4, $a7, $7e, $3d, $64, $5d, $19, $73,
          $60, $81, $4f, $dc, $22, $2a, $90, $88, $46, $ee, $b8, $14, $de, $5e, $0b, $db,
          $e0, $32, $3a, $0a, $49, $06, $24, $5c, $c2, $d3, $ac, $62, $91, $95, $e4, $79,
          $e7, $c8, $37, $6d, $8d, $d5, $4e, $a9, $6c, $56, $f4, $ea, $65, $7a, $ae, $08,
          $ba, $78, $25, $2e, $1c, $a6, $b4, $c6, $e8, $dd, $74, $1f, $4b, $bd, $8b, $8a,
          $70, $3e, $b5, $66, $48, $03, $f6, $0e, $61, $35, $57, $b9, $86, $c1, $1d, $9e,
          $e1, $f8, $98, $11, $69, $d9, $8e, $94, $9b, $1e, $87, $e9, $ce, $55, $28, $df,
          $8c, $a1, $89, $0d, $bf, $e6, $42, $68, $41, $99, $2d, $0f, $b0, $54, $bb, $16);
    {$EndRegion}
    public
      procedure Encrypt( var Input : TBytes; Key : TBytes);
      procedure Decrypt(var Input: Tbytes; Key: Tbytes);

      procedure TestState(State : Tbytes);

      Procedure EncryptFile(sFileName : String; bHideKey : boolean); overload;
      Procedure EncryptFile(sFileName: String; Key : string); overload;
      Procedure EncryptFile(sFileName: String; Key : TBytes); overload;

      procedure EncryptString(var sStr : string; key : Tbytes); overload;
      procedure EncryptString(var sStr : string; sKey : string); overload;
      procedure EncryptString(var sStr : string); overload;

      procedure DecryptFile(SFileName: String; bHideKey : boolean); Overload;
      procedure DecryptFile(SFileName: String; sKey : String); Overload;
      procedure DecryptFile(SFileName: String; Key : Tbytes); Overload;

      procedure DecryptString(var sStr : string; key : Tbytes); overload;
      procedure DecryptString(var sStr : string; sKey : string); overload;
      procedure DecryptString(var sStr : string); overload;

      function  ChangeFileName(sFileName : string; bIsEncrypted : boolean) : string;
      procedure CopyAndRename(sFileName,sNewFileName : string);

    end;

  var
  AES : TAES;
  Custom : TCustom;

implementation

{$Region 'AES encryption'}

procedure TAES.AddPadding(var Input: TBytes);
var
  I, pos: Integer;
begin
  pos := Length(Input);
  SetLength(Input, (Floor( pos/16 + 1) * 16)); // Increases size to next 16 factor

  //ISO/IEC 7816-4 standard padding
  Input[pos] := $80;
  for I := pos + 1 to Length(Input) - 1 do
    Input[I] := $00;
end;

procedure TAES.AddRoundKey(var State: TBytes; RoundKey: array of byte; iRound : integer);
var
  I: Integer;
begin
  for I := 0 to 15 do
  begin
    State[I] := State[I] XOR RoundKey[I + (16 * iRound)];
  end;
end;

function TAES.ChangeFileName(sFileName : string; bIsEncrypted : Boolean): string;
var
  sExtension : string;
begin
  sExtension := TPath.GetExtension(sFileName);

  if not bIsEncrypted then
    begin
      if sExtension  = '.txt' then sExtension := '.etxt'
      else if sExtension  = '.mdb' then sExtension := '.emdb'
      else if sExtension  = '.accdb' then sExtension := '.eaccdb'
      else if sExtension  = '.csv' then sExtension := '.ecsv';
    end
  else
    begin
      if sExtension  = '.etxt' then sExtension := '.txt'
      else if sExtension  = '.emdb' then sExtension := '.mdb'
      else if sExtension  = '.eaccdb' then sExtension := '.accdb'
      else if sExtension  = '.ecsv' then sExtension := '.csv';
    end;

  Result := TPath.GetDirectoryName(sFileName) + '\'
    + TPaTh.GetFileNameWithoutExtension(sFileName) + sExtension;
end;

procedure TAES.CopyAndRename(sFileName, sNewFileName: string);
var
  FileName,NewfileName : PWideChar;
begin
FileName := nil;
NewfileName := nil;
try
  try
  New(FileName);
  New(NewfileName);

  StringToWideChar(sFileName,FileName,length(sFileName));
  StringToWideChar(sNewFileName,NewFileName,Length(sNewFileName));

  CopyFile(FileName,NewFileName, False)

  except on E: Exception do
    MessageDlg(E.Message,mtError,[mbOk],0)
  end;
finally
  FreeMem(FileName);
  FreeMem(NewfileName);
end;
end;

procedure TAES.Encrypt(var Input: TBytes; Key : TBytes);
var
  RoundKey : TBytes;
  State : TBytes; // one block/ 16 bytes /128 bit
  pos, I, J: integer;
begin
  SetLength(RoundKey,176);
  SetLength(State, 16);

  AddPadding(Input);

  ExpandKey(Key,RoundKey);

  pos := 0;
  for I := 1 to Length(Input) Div 16 do
  begin
    for J := pos to (pos + 15) do
      State[J-pos] := Input[J];  // copy 16 bytes

    //Pre round
    AddRoundKey(State,RoundKey,0);

    for J := 1 to 9 do   //rounds
      begin
        SubBytes(State);
        ShiftRows(State);
        MixColoms(State);
        AddRoundKey(State, RoundKey, J);
      end;

    //Final round
    SubBytes(State);
    ShiftRows(State);
    AddRoundKey(State,RoundKey, 10);

    for J := 0 to 15 do
      begin
        Input[pos] := State[J];
        Inc(pos);
      end;
  end;
end;

procedure TAES.EncryptFile(sFilename: String; Key: TBytes);
var
  ArrBytes : TBytes;
begin
  ReadFile(sFileName, ArrBytes);
  Encrypt(ArrBytes,Key);
  WriteFile(sFileName,ArrBytes);
end;

procedure TAES.EncryptFile(sFileName: String; Key: string);
var
  ArrBytes : Tbytes;
begin
  ReadFile(sFileName, ArrBytes);
  Encrypt(ArrBytes, BytesOf(Key));
  WriteFile(sFileName, ArrBytes);
end;

procedure TAES.EncryptFile(sFileName: String; bHideKey : boolean);
var
  ArrBytes : TBytes;
  Key : Tbytes;
begin
  ReadFile(sFileName, ArrBytes);
  GenKey(Key);
  Encrypt(ArrBytes, Key);

  if bHideKey then
    HideKey(ArrBytes, Key)
  else
    begin
      ShowMessage('This is your random key: ' + TEncoding.Unicode.GetString(Key) + ' Copied to your clipboard!');
      Clipboard.AsText := TEncoding.Unicode.GetString(Key);
    end;

  WriteFile(ChangeFileName(sFileName,False), ArrBytes);
end;

procedure TAES.EncryptString(var sStr: string);
var
  arrBytes : TBytes;
  Key : Tbytes;
  iCount: Integer;
begin
  arrBytes := BytesOF(sStr);
  GenKey(Key);

  encrypt(arrBytes,Key);

  for iCount := 0 to Length(ArrBytes) - 1 do
    sStr[icount + 1] := chr(arrBytes[iCount]);
end;

procedure TAES.EncryptString(var sStr: string; sKey: string);
var
  arrBytes : TBytes;
  Key : Tbytes;
  iCount: Integer;
begin
  arrBytes := TEncoding.Unicode.GetBytes(sStr);
  Key := BytesOf(sKey);

  encrypt(arrBytes,Key);

  for iCount := 0 to Length(ArrBytes) - 1 do
    sStr[icount + 1] := chr(arrBytes[iCount]);
end;

procedure TAES.EncryptString(var sStr: string; key: Tbytes);
var
  arrBytes : TBytes;
  iCount: Integer;
begin
  arrBytes := BytesOF(sStr);

  encrypt(arrBytes,Key);

  for iCount := 0 to Length(ArrBytes) - 1 do
    sStr[icount + 1] := chr(arrBytes[iCount]);
end;

procedure TAES.ExpandKey(var Key: TBytes;  var ExpandedKey : TBytes);
var
  I, iBytesGen, iRCon: Integer;
  arrTemp : TBytes; //Temp storage for schedule
  
begin
  SetLength(arrTemp, 4);

  //copy first 16 bytes
  for I := 0 to 15 do
    ExpandedKey[I] := Key[I];

  iBytesGen := 16;
  iRCon := 1;

  while iBytesGen < 176 do // it needs 11 x 16 byte keys
  begin
    //copy last four bytes generated
    for I := 0 to 3 do
      begin
        arrTemp[I] := ExpandedKey[I + iBytesGen - 4];
      end;

      if iBytesGen mod 16 = 0 then //every 16 bytes 
      begin
        ExpandKeySched(arrTemp,iRcon);  // arrtemp = sbox(circular left shift( arrtemp)) XOR Round Constant
        Inc(iRCon);
      end;

      for I := 0 to 3 do   //XOR temp with the first 4 bytes of every 16 byte term
      begin
        ExpandedKey[iBytesGen] := ExpandedKey[iBytesGen - 16] Xor arrTemp[I];
        Inc(iBytesGen);
      end;

  end;
end;

procedure TAES.ExpandKeySched(var Word: Tbytes; iRound: Byte);
const RCON : array[1..10] of byte =
  ($01,	$02,	$04,	$08,	$10,	$20,	$40,	$80,	$1B,	$36);
var
  iTemp : byte;
  I : integer;
begin
  //Shift bytes to the left
  iTemp := Word[0];
  Word[0] := Word[1];
  Word[1] := Word[2];
  Word[2] := Word[3];
  Word[3] :=  iTemp;

  //Substitute bytes from SBOX
  for I := 0 to 3 do
    Word[I] := SBOX[Word[I]];

  Word[0] := Word[0] XOR RCon[iRound];

end;

Procedure TAES.FindKey(var Input, Key: Tbytes);
var
  iSet, I, K, L, iCount: integer;
  arrTemp : Tbytes;
begin
  SetLength(Key,16);
  SetLength(arrTemp, Length(Input));
  iSet := (Length(Input)-16) div 16; //posistion of key

  for I := 0 to Length(Input) -1 do
    arrTemp[I] := Input[I];

   SetLength(Input, Length(Input) - 16); //length of input after key removal

  K := 0;
  L := 0;
  iCount := 0;
  for I := 0 to Length(arrTemp) - 1 do
    begin
      if iCount = iSet then
        begin
          Key[K] := arrTemp[I];
          Inc(K);
          iCount := 0;
        end
        else
        begin
          Input[L] := arrTemp[I];
          Inc(L);
          Inc(iCount);
        end;
    end;
  Key := Custom.Decrypt(Key);
end;

procedure TAES.GenKey(var Key: TBytes);
var
  I: Integer;
  sKey : string;
begin
  Setlength(Key, 16);

  for I := 0 to 15 do
  begin
    Randomize;
    Key[I] := Random(256);
    sKey := sKey + Chr(Key[I]) + ' ';
  end;

  Showmessage('This is the random key: ' + sKey);
end;

procedure TAES.HideKey(var Encoded, Key: TBytes);   //Hides key in message for file encryption
var
  arrTemp : Tbytes;
  I, iSet, J, K, iCount :Integer;
begin
  Key := Custom.Encrypt(Key);
  iSet := Length(Encoded) div 16;
  SetLength(arrTemp,length(encoded));
  SetLength(Encoded,length(Encoded) + 16);

  for I := 0 to length(arrTemp) - 1 do
    arrTemp[I] := Encoded[I];

  J := 0;
  K := 0;
  iCount := 0;
  for I := 0 to Length(Encoded) - 1 do
    begin
      if iCount = iSet then
        begin
          Encoded[I] := Key[J];
          Inc(J);
          iCount := 0;
        end else
            begin
              Encoded[I] := arrTemp[K];
              Inc(K);
              Inc(iCount);
            end;

    end;
end;

procedure TAES.MixColoms(var State: TBytes);
const MUL2 : array[0..255] of byte =
  ( $00,$02,$04,$06,$08,$0a,$0c,$0e,$10,$12,$14,$16,$18,$1a,$1c,$1e,
    $20,$22,$24,$26,$28,$2a,$2c,$2e,$30,$32,$34,$36,$38,$3a,$3c,$3e,
    $40,$42,$44,$46,$48,$4a,$4c,$4e,$50,$52,$54,$56,$58,$5a,$5c,$5e,
    $60,$62,$64,$66,$68,$6a,$6c,$6e,$70,$72,$74,$76,$78,$7a,$7c,$7e,
    $80,$82,$84,$86,$88,$8a,$8c,$8e,$90,$92,$94,$96,$98,$9a,$9c,$9e,
    $a0,$a2,$a4,$a6,$a8,$aa,$ac,$ae,$b0,$b2,$b4,$b6,$b8,$ba,$bc,$be,
    $c0,$c2,$c4,$c6,$c8,$ca,$cc,$ce,$d0,$d2,$d4,$d6,$d8,$da,$dc,$de,
    $e0,$e2,$e4,$e6,$e8,$ea,$ec,$ee,$f0,$f2,$f4,$f6,$f8,$fa,$fc,$fe,
    $1b,$19,$1f,$1d,$13,$11,$17,$15,$0b,$09,$0f,$0d,$03,$01,$07,$05,
    $3b,$39,$3f,$3d,$33,$31,$37,$35,$2b,$29,$2f,$2d,$23,$21,$27,$25,
    $5b,$59,$5f,$5d,$53,$51,$57,$55,$4b,$49,$4f,$4d,$43,$41,$47,$45,
    $7b,$79,$7f,$7d,$73,$71,$77,$75,$6b,$69,$6f,$6d,$63,$61,$67,$65,
    $9b,$99,$9f,$9d,$93,$91,$97,$95,$8b,$89,$8f,$8d,$83,$81,$87,$85,
    $bb,$b9,$bf,$bd,$b3,$b1,$b7,$b5,$ab,$a9,$af,$ad,$a3,$a1,$a7,$a5,
    $db,$d9,$df,$dd,$d3,$d1,$d7,$d5,$cb,$c9,$cf,$cd,$c3,$c1,$c7,$c5,
    $fb,$f9,$ff,$fd,$f3,$f1,$f7,$f5,$eb,$e9,$ef,$ed,$e3,$e1,$e7,$e5 );

    MUL3 : array[0..255] of byte =
    ( $00,$03,$06,$05,$0c,$0f,$0a,$09,$18,$1b,$1e,$1d,$14,$17,$12,$11,
      $30,$33,$36,$35,$3c,$3f,$3a,$39,$28,$2b,$2e,$2d,$24,$27,$22,$21,
      $60,$63,$66,$65,$6c,$6f,$6a,$69,$78,$7b,$7e,$7d,$74,$77,$72,$71,
      $50,$53,$56,$55,$5c,$5f,$5a,$59,$48,$4b,$4e,$4d,$44,$47,$42,$41,
      $c0,$c3,$c6,$c5,$cc,$cf,$ca,$c9,$d8,$db,$de,$dd,$d4,$d7,$d2,$d1,
      $f0,$f3,$f6,$f5,$fc,$ff,$fa,$f9,$e8,$eb,$ee,$ed,$e4,$e7,$e2,$e1,
      $a0,$a3,$a6,$a5,$ac,$af,$aa,$a9,$b8,$bb,$be,$bd,$b4,$b7,$b2,$b1,
      $90,$93,$96,$95,$9c,$9f,$9a,$99,$88,$8b,$8e,$8d,$84,$87,$82,$81,
      $9b,$98,$9d,$9e,$97,$94,$91,$92,$83,$80,$85,$86,$8f,$8c,$89,$8a,
      $ab,$a8,$ad,$ae,$a7,$a4,$a1,$a2,$b3,$b0,$b5,$b6,$bf,$bc,$b9,$ba,
      $fb,$f8,$fd,$fe,$f7,$f4,$f1,$f2,$e3,$e0,$e5,$e6,$ef,$ec,$e9,$ea,
      $cb,$c8,$cd,$ce,$c7,$c4,$c1,$c2,$d3,$d0,$d5,$d6,$df,$dc,$d9,$da,
      $5b,$58,$5d,$5e,$57,$54,$51,$52,$43,$40,$45,$46,$4f,$4c,$49,$4a,
      $6b,$68,$6d,$6e,$67,$64,$61,$62,$73,$70,$75,$76,$7f,$7c,$79,$7a,
      $3b,$38,$3d,$3e,$37,$34,$31,$32,$23,$20,$25,$26,$2f,$2c,$29,$2a,
      $0b,$08,$0d,$0e,$07,$04,$01,$02,$13,$10,$15,$16,$1f,$1c,$19,$1a );
  var
    arrTemp : Tbytes;
begin
  SetLength(ArrTemp, 16);

  ArrTemp[0] := MUL2[State[0]] XOR MUl3[State[1]] XOR State[2] XOR State[3];
  ArrTemp[1] := State[0] XOR MUl2[State[1]] XOR Mul3[State[2]] XOR State[3];
  ArrTemp[2] := State[0] XOR State[1] XOR Mul2[State[2]] XOR Mul3[State[3]];
  ArrTemp[3] := MUL3[State[0]] XOR State[1] XOR State[2] XOR Mul2[State[3]];

  ArrTemp[4] := MUL2[State[4]] XOR MUl3[State[5]] XOR State[6] XOR State[7];
  ArrTemp[5] := State[4] XOR MUl2[State[5]] XOR Mul3[State[6]] XOR State[7];
  ArrTemp[6] := State[4] XOR State[5] XOR Mul2[State[6]] XOR Mul3[State[7]];
  ArrTemp[7] := MUL3[State[4]] XOR State[5] XOR State[6] XOR Mul2[State[7]];

  ArrTemp[8] := MUL2[State[8]] XOR MUl3[State[9]] XOR State[10] XOR State[11];
  ArrTemp[9] := State[8] XOR MUl2[State[9]] XOR Mul3[State[10]] XOR State[11];
  ArrTemp[10] := State[8] XOR State[9] XOR Mul2[State[10]] XOR Mul3[State[11]];
  ArrTemp[11] := MUL3[State[8]] XOR State[9] XOR State[10] XOR Mul2[State[11]];

  ArrTemp[12] := MUL2[State[12]] XOR MUl3[State[13]] XOR State[14] XOR State[15];
  ArrTemp[13] := State[12] XOR MUl2[State[13]] XOR Mul3[State[14]] XOR State[15];
  ArrTemp[14] := State[12] XOR State[13] XOR Mul2[State[14]] XOR Mul3[State[15]];
  ArrTemp[15] := MUL3[State[12]] XOR State[13] XOR State[14] XOR Mul2[State[15]];

  State := arrTemp;

end;

procedure TAES.ShiftRows(var State: TBytes);
var
  arrTemp, arrTemp2 : array of TBytes;
  K: Integer;
  iRow, iCol : Integer;
begin
  SetLength(arrTemp,4,4);
   SetLength(arrTemp2,4,4);

   K := 0;
  for iCol := 0 to 3 do     //cycle through rows
    begin
      for iRow := 0 to 3 do   //cycle through colums
        begin
          arrTemp[iRow,iCol] := State[K];    //fill table from bottom to top
          Inc(K);
        end;
    end;

  for iRow := 0 to 3 do
    begin
      for iCol := 0 to 3 do
        begin
          arrTemp2[iRow,iCol] := arrTemp[iRow,(iRow + iCol) mod 4];  //Shift rows left
        end;
    end;

  K := 0;
  for iCol := 0 to 3 do
    for iRow := 0 to 3 do
      begin
        state[k] := arrTemp2[iRow,iCol];
        Inc(K);
      end;
end;

procedure TAES.SubBytes(var State: TBytes);
var
  I: Integer;
begin
  for I := 0 to Length(State) -1 do
    State[I] := SBOX[State[I]];
end;

procedure TAES.Decrypt(var Input : Tbytes; Key : Tbytes);
var
  State, arrRoundKey : Tbytes;
  iRound, iCount, iCount2, pos : integer;
begin
  pos := 0;
  SetLength(arrRoundKey, 176);
  SetLength(State, 16);

  ExpandKey(Key,arrRoundKey);
  for iCount := 1 to Length(Input) div 16 do
    begin
      //Copy 16 bytes
      for iCount2 := pos to pos + 15 do
        State[iCount2 - pos] := Input[iCount2];

      //pre round
      iRound := 10;
      AddRoundKey(state, arrRoundKey, iRound);
       // 9 rounds
      for iRound := 9 downto 1 do
        begin
          InvShiftRows(State);
          InvSubBytes(State);
          AddRoundKey(state, arrRoundKey, iRound);
          InvMixColumns(State);
        end;

      //Last round
      InvShiftRows(State);
      InvSubBytes(State);
      AddRoundKey(State,arrRoundKey, 0);

      //Copy bytes from state to input
      for iCount2 := 0 to 15 do
        begin
          Input[pos] := state[iCount2];
          Inc(pos);
        end;
    end;
  
  RemovePadding(Input);
end;

procedure TAES.DecryptFile(SFileName: String; bHideKey : Boolean);
var
  arrBytes : TBytes;
  Key : Tbytes;
begin
  ReadFile(sFileName,arrBytes);

  if bHideKey then
    FindKey(arrBytes, Key)
  else
    Key := TEnCoding.Unicode.GetBytes(InputBox('Decyrypt','Enter the key: ',''));

  Decrypt(arrbytes, Key);
  WriteFile(sFileName,arrBytes);
end;

procedure TAES.DecryptFile(SFileName, sKey: String);
var
  arrBytes : TBytes;
begin
  ReadFile(sFileName,arrBytes);
  Decrypt(arrbytes, BytesOf(sKey));
  WriteFile(sFileName,arrBytes);
end;

procedure TAES.DecryptFile(SFileName: String; Key: Tbytes);
var
  arrBytes : TBytes;
begin
  ReadFile(sFileName,arrBytes);
  Decrypt(arrbytes, Key);
  WriteFile(sFileName,arrBytes);
end;


procedure TAES.DecryptString(var sStr: string; key: Tbytes);
var
  arrBytes : TBytes;
  
  iCount: Integer;
begin
  arrBytes := BytesOF(sStr);

  decrypt(arrBytes,Key);

  for iCount := 0 to Length(ArrBytes) - 1 do
    sStr[icount + 1] := chr(arrBytes[iCount]);
end;


procedure TAES.DecryptString(var sStr: string; sKey: string);
var
  arrBytes : TBytes;
  Key : Tbytes;
  iCount: Integer;
begin
  arrBytes := BytesOF(sStr);
  Key := BytesOf(sKey);

  decrypt(arrBytes,Key);

  for iCount := 0 to Length(ArrBytes) - 1 do
    sStr[icount + 1] := chr(arrBytes[iCount]);
end;

procedure TAES.DecryptString(var sStr: string);
var
  arrBytes : TBytes;
  Key : Tbytes;
  iCount: Integer;
begin
  arrBytes := BytesOF(sStr);
  GenKey(Key);

  Decrypt(arrBytes,Key);

  for iCount := 0 to Length(ArrBytes) - 1 do
    sStr[icount + 1] := chr(arrBytes[iCount]);
end;

procedure TAES.InvMixColumns;
const
  MUL9 : array[0..255] of byte = (
    $00,$09,$12,$1b,$24,$2d,$36,$3f,$48,$41,$5a,$53,$6c,$65,$7e,$77,
    $90,$99,$82,$8b,$b4,$bd,$a6,$af,$d8,$d1,$ca,$c3,$fc,$f5,$ee,$e7,
    $3b,$32,$29,$20,$1f,$16,$0d,$04,$73,$7a,$61,$68,$57,$5e,$45,$4c,
    $ab,$a2,$b9,$b0,$8f,$86,$9d,$94,$e3,$ea,$f1,$f8,$c7,$ce,$d5,$dc,
    $76,$7f,$64,$6d,$52,$5b,$40,$49,$3e,$37,$2c,$25,$1a,$13,$08,$01,
    $e6,$ef,$f4,$fd,$c2,$cb,$d0,$d9,$ae,$a7,$bc,$b5,$8a,$83,$98,$91,
    $4d,$44,$5f,$56,$69,$60,$7b,$72,$05,$0c,$17,$1e,$21,$28,$33,$3a,
    $dd,$d4,$cf,$c6,$f9,$f0,$eb,$e2,$95,$9c,$87,$8e,$b1,$b8,$a3,$aa,
    $ec,$e5,$fe,$f7,$c8,$c1,$da,$d3,$a4,$ad,$b6,$bf,$80,$89,$92,$9b,
    $7c,$75,$6e,$67,$58,$51,$4a,$43,$34,$3d,$26,$2f,$10,$19,$02,$0b,
    $d7,$de,$c5,$cc,$f3,$fa,$e1,$e8,$9f,$96,$8d,$84,$bb,$b2,$a9,$a0,
    $47,$4e,$55,$5c,$63,$6a,$71,$78,$0f,$06,$1d,$14,$2b,$22,$39,$30,
    $9a,$93,$88,$81,$be,$b7,$ac,$a5,$d2,$db,$c0,$c9,$f6,$ff,$e4,$ed,
    $0a,$03,$18,$11,$2e,$27,$3c,$35,$42,$4b,$50,$59,$66,$6f,$74,$7d,
    $a1,$a8,$b3,$ba,$85,$8c,$97,$9e,$e9,$e0,$fb,$f2,$cd,$c4,$df,$d6,
    $31,$38,$23,$2a,$15,$1c,$07,$0e,$79,$70,$6b,$62,$5d,$54,$4f,$46);
  MUL11 : array[0..255] of byte = (
    $00,$0b,$16,$1d,$2c,$27,$3a,$31,$58,$53,$4e,$45,$74,$7f,$62,$69,
    $b0,$bb,$a6,$ad,$9c,$97,$8a,$81,$e8,$e3,$fe,$f5,$c4,$cf,$d2,$d9,
    $7b,$70,$6d,$66,$57,$5c,$41,$4a,$23,$28,$35,$3e,$0f,$04,$19,$12,
    $cb,$c0,$dd,$d6,$e7,$ec,$f1,$fa,$93,$98,$85,$8e,$bf,$b4,$a9,$a2,
    $f6,$fd,$e0,$eb,$da,$d1,$cc,$c7,$ae,$a5,$b8,$b3,$82,$89,$94,$9f,
    $46,$4d,$50,$5b,$6a,$61,$7c,$77,$1e,$15,$08,$03,$32,$39,$24,$2f,
    $8d,$86,$9b,$90,$a1,$aa,$b7,$bc,$d5,$de,$c3,$c8,$f9,$f2,$ef,$e4,
    $3d,$36,$2b,$20,$11,$1a,$07,$0c,$65,$6e,$73,$78,$49,$42,$5f,$54,
    $f7,$fc,$e1,$ea,$db,$d0,$cd,$c6,$af,$a4,$b9,$b2,$83,$88,$95,$9e,
    $47,$4c,$51,$5a,$6b,$60,$7d,$76,$1f,$14,$09,$02,$33,$38,$25,$2e,
    $8c,$87,$9a,$91,$a0,$ab,$b6,$bd,$d4,$df,$c2,$c9,$f8,$f3,$ee,$e5,
    $3c,$37,$2a,$21,$10,$1b,$06,$0d,$64,$6f,$72,$79,$48,$43,$5e,$55,
    $01,$0a,$17,$1c,$2d,$26,$3b,$30,$59,$52,$4f,$44,$75,$7e,$63,$68,
    $b1,$ba,$a7,$ac,$9d,$96,$8b,$80,$e9,$e2,$ff,$f4,$c5,$ce,$d3,$d8,
    $7a,$71,$6c,$67,$56,$5d,$40,$4b,$22,$29,$34,$3f,$0e,$05,$18,$13,
    $ca,$c1,$dc,$d7,$e6,$ed,$f0,$fb,$92,$99,$84,$8f,$be,$b5,$a8,$a3 );
  MUL13 : array[0..255] of byte = (
    $00,$0d,$1a,$17,$34,$39,$2e,$23,$68,$65,$72,$7f,$5c,$51,$46,$4b,
    $d0,$dd,$ca,$c7,$e4,$e9,$fe,$f3,$b8,$b5,$a2,$af,$8c,$81,$96,$9b,
    $bb,$b6,$a1,$ac,$8f,$82,$95,$98,$d3,$de,$c9,$c4,$e7,$ea,$fd,$f0,
    $6b,$66,$71,$7c,$5f,$52,$45,$48,$03,$0e,$19,$14,$37,$3a,$2d,$20,
    $6d,$60,$77,$7a,$59,$54,$43,$4e,$05,$08,$1f,$12,$31,$3c,$2b,$26,
    $bd,$b0,$a7,$aa,$89,$84,$93,$9e,$d5,$d8,$cf,$c2,$e1,$ec,$fb,$f6,
    $d6,$db,$cc,$c1,$e2,$ef,$f8,$f5,$be,$b3,$a4,$a9,$8a,$87,$90,$9d,
    $06,$0b,$1c,$11,$32,$3f,$28,$25,$6e,$63,$74,$79,$5a,$57,$40,$4d,
    $da,$d7,$c0,$cd,$ee,$e3,$f4,$f9,$b2,$bf,$a8,$a5,$86,$8b,$9c,$91,
    $0a,$07,$10,$1d,$3e,$33,$24,$29,$62,$6f,$78,$75,$56,$5b,$4c,$41,
    $61,$6c,$7b,$76,$55,$58,$4f,$42,$09,$04,$13,$1e,$3d,$30,$27,$2a,
    $b1,$bc,$ab,$a6,$85,$88,$9f,$92,$d9,$d4,$c3,$ce,$ed,$e0,$f7,$fa,
    $b7,$ba,$ad,$a0,$83,$8e,$99,$94,$df,$d2,$c5,$c8,$eb,$e6,$f1,$fc,
    $67,$6a,$7d,$70,$53,$5e,$49,$44,$0f,$02,$15,$18,$3b,$36,$21,$2c,
    $0c,$01,$16,$1b,$38,$35,$22,$2f,$64,$69,$7e,$73,$50,$5d,$4a,$47,
    $dc,$d1,$c6,$cb,$e8,$e5,$f2,$ff,$b4,$b9,$ae,$a3,$80,$8d,$9a,$97 );
  MUL14 : array[0..255] of byte = (
    $00,$0e,$1c,$12,$38,$36,$24,$2a,$70,$7e,$6c,$62,$48,$46,$54,$5a,
    $e0,$ee,$fc,$f2,$d8,$d6,$c4,$ca,$90,$9e,$8c,$82,$a8,$a6,$b4,$ba,
    $db,$d5,$c7,$c9,$e3,$ed,$ff,$f1,$ab,$a5,$b7,$b9,$93,$9d,$8f,$81,
    $3b,$35,$27,$29,$03,$0d,$1f,$11,$4b,$45,$57,$59,$73,$7d,$6f,$61,
    $ad,$a3,$b1,$bf,$95,$9b,$89,$87,$dd,$d3,$c1,$cf,$e5,$eb,$f9,$f7,
    $4d,$43,$51,$5f,$75,$7b,$69,$67,$3d,$33,$21,$2f,$05,$0b,$19,$17,
    $76,$78,$6a,$64,$4e,$40,$52,$5c,$06,$08,$1a,$14,$3e,$30,$22,$2c,
    $96,$98,$8a,$84,$ae,$a0,$b2,$bc,$e6,$e8,$fa,$f4,$de,$d0,$c2,$cc,
    $41,$4f,$5d,$53,$79,$77,$65,$6b,$31,$3f,$2d,$23,$09,$07,$15,$1b,
    $a1,$af,$bd,$b3,$99,$97,$85,$8b,$d1,$df,$cd,$c3,$e9,$e7,$f5,$fb,
    $9a,$94,$86,$88,$a2,$ac,$be,$b0,$ea,$e4,$f6,$f8,$d2,$dc,$ce,$c0,
    $7a,$74,$66,$68,$42,$4c,$5e,$50,$0a,$04,$16,$18,$32,$3c,$2e,$20,
    $ec,$e2,$f0,$fe,$d4,$da,$c8,$c6,$9c,$92,$80,$8e,$a4,$aa,$b8,$b6,
    $0c,$02,$10,$1e,$34,$3a,$28,$26,$7c,$72,$60,$6e,$44,$4a,$58,$56,
    $37,$39,$2b,$25,$0f,$01,$13,$1d,$47,$49,$5b,$55,$7f,$71,$63,$6d,
    $d7,$d9,$cb,$c5,$ef,$e1,$f3,$fd,$a7,$a9,$bb,$b5,$9f,$91,$83,$8d);
var
  arrTemp : TBytes;
begin
  SetLength(arrTemp,16);

  arrTemp[0] := MUl14[State[0]] xor MUL11[State[1]] xor MUL13[State[2]] xor MUL9[State[3]];
  arrTemp[1] := MUl9[State[0]] xor MUL14[State[1]] xor MUL11[State[2]] xor MUL13[State[3]];
  arrTemp[2] := MUl13[State[0]] xor MUL9[State[1]] xor MUL14[State[2]] xor MUL11[State[3]];
  arrTemp[3] := MUl11[State[0]] xor MUL13[State[1]] xor MUL9[State[2]] xor MUL14[State[3]];

  arrTemp[4] := MUl14[State[4]] xor MUL11[State[5]] xor MUL13[State[6]] xor MUL9[State[7]];
  arrTemp[5] := MUl9[State[4]] xor MUL14[State[5]] xor MUL11[State[6]] xor MUL13[State[7]];
  arrTemp[6] := MUl13[State[4]] xor MUL9[State[5]] xor MUL14[State[6]] xor MUL11[State[7]];
  arrTemp[7] := MUl11[State[4]] xor MUL13[State[5]] xor MUL9[State[6]] xor MUL14[State[7]];

  arrTemp[8] := MUl14[State[8]] xor MUL11[State[9]] xor MUL13[State[10]] xor MUL9[State[11]];
  arrTemp[9] := MUl9[State[8]] xor MUL14[State[9]] xor MUL11[State[10]] xor MUL13[State[11]];
  arrTemp[10] := MUl13[State[8]] xor MUL9[State[9]] xor MUL14[State[10]] xor MUL11[State[11]];
  arrTemp[11] := MUl11[State[8]] xor MUL13[State[9]] xor MUL9[State[10]] xor MUL14[State[11]];

  arrTemp[12] := MUl14[State[12]] xor MUL11[State[13]] xor MUL13[State[14]] xor MUL9[State[15]];
  arrTemp[13] := MUl9[State[12]] xor MUL14[State[13]] xor MUL11[State[14]] xor MUL13[State[15]];
  arrTemp[14] := MUl13[State[12]] xor MUL9[State[13]] xor MUL14[State[14]] xor MUL11[State[15]];
  arrTemp[15] := MUl11[State[12]] xor MUL13[State[13]] xor MUL9[State[14]] xor MUL14[State[15]];

  State := arrTemp;
end;

procedure TAES.InvShiftRows(var State : Tbytes);
var
  arrTemp, arrTemp2 : array of TBytes;
  K: Integer;
  iRow, iCol : Integer;
begin
  SetLength(arrTemp,4,4);
  SetLength(arrTemp2,4,4);  

   K := 0;
  for iCol := 0 to 3 do     //cycle through rows
    begin
      for iRow := 0 to 3 do   //cycle through colums
        begin
          arrTemp[iRow,iCol] := State[K];    //fill table from bottom to top
          Inc(K);
        end;
    end;

  for iRow := 0 to 3 do
    begin
      for iCol := 0 to 3 do
        begin
          arrTemp2[iRow,(iRow + iCol) mod 4] := arrTemp[iRow,iCol];  //Shift rows left
        end;
    end;

  K := 0;
  for iCol := 0 to 3 do
    for iRow := 0 to 3 do
      begin
        state[k] := arrTemp2[iRow,iCol];
        Inc(K);
      end;
end;

procedure TAES.InvSubBytes;
const INVSBOX : array[0..255] of byte = (
  $52, $09, $6a, $d5, $30, $36, $a5, $38, $bf, $40, $a3, $9e, $81, $f3, $d7, $fb,
  $7c, $e3, $39, $82, $9b, $2f, $ff, $87, $34, $8e, $43, $44, $c4, $de, $e9, $cb,
  $54, $7b, $94, $32, $a6, $c2, $23, $3d, $ee, $4c, $95, $0b, $42, $fa, $c3, $4e,
  $08, $2e, $a1, $66, $28, $d9, $24, $b2, $76, $5b, $a2, $49, $6d, $8b, $d1, $25,
  $72, $f8, $f6, $64, $86, $68, $98, $16, $d4, $a4, $5c, $cc, $5d, $65, $b6, $92,
  $6c, $70, $48, $50, $fd, $ed, $b9, $da, $5e, $15, $46, $57, $a7, $8d, $9d, $84,
  $90, $d8, $ab, $00, $8c, $bc, $d3, $0a, $f7, $e4, $58, $05, $b8, $b3, $45, $06,
  $d0, $2c, $1e, $8f, $ca, $3f, $0f, $02, $c1, $af, $bd, $03, $01, $13, $8a, $6b,
  $3a, $91, $11, $41, $4f, $67, $dc, $ea, $97, $f2, $cf, $ce, $f0, $b4, $e6, $73,
  $96, $ac, $74, $22, $e7, $ad, $35, $85, $e2, $f9, $37, $e8, $1c, $75, $df, $6e,
  $47, $f1, $1a, $71, $1d, $29, $c5, $89, $6f, $b7, $62, $0e, $aa, $18, $be, $1b,
  $fc, $56, $3e, $4b, $c6, $d2, $79, $20, $9a, $db, $c0, $fe, $78, $cd, $5a, $f4,
  $1f, $dd, $a8, $33, $88, $07, $c7, $31, $b1, $12, $10, $59, $27, $80, $ec, $5f,
  $60, $51, $7f, $a9, $19, $b5, $4a, $0d, $2d, $e5, $7a, $9f, $93, $c9, $9c, $ef,
  $a0, $e0, $3b, $4d, $ae, $2a, $f5, $b0, $c8, $eb, $bb, $3c, $83, $53, $99, $61,
  $17, $2b, $04, $7e, $ba, $77, $d6, $26, $e1, $69, $14, $63, $55, $21, $0c, $7d );
var
  iCount: Integer;
begin
  for iCount := 0 to 15 do
    State[ICount] := INVSBOX[State[iCount]];
end;

procedure TAES.ReadFile(sFileName: string; var arrBytes: Tbytes);
var
  F : File of byte;
  iCount : integer;
  b : byte;
begin
  try
    if (sFileName = '') or (not FileExists(sFileName)) then
      raise Exception.Create('File encryption: No file name given/ File does not exsists')
    else
      AssignFile(F, sFileName);

    Reset(F);

     //Determines number of records/bytes in the file
    SetLength(arrBytes,FileSize(F)); //Set length of dynamic array

    iCount := 0;
    while not Eof(F) do
    begin
      BlockRead(F,b,1); //Reads one byte at a time
      arrBytes[iCount] := b;
      Inc(iCount);
    end;

    closefile(F);
  except

  end;
end;

procedure TAES.RemovePadding;
var
  I, J: Integer;
  bIsPadding : boolean;
begin
bIsPadding := false;
  for I := 0 to length(State) - 1 do
    begin
      if State[I] = $80 then //finds hex $80
      begin
        bIsPadding := true;

        for j := I + 1 to Length(state) - 1 do //if the rest of the bytes are $00
        begin
          if State[J] = $00 then
            bIsPadding := true
            else
            begin
              bIsPadding := false; //else stop iteration and find next $80
              Break;
            end;

        end;
      end;

      if bIsPadding then // Stop main loop if padding is detected
        Break;
    end;

  SetLength(State, I);
end;

procedure TAES.TestState(State: Tbytes);
var
  I: Integer;
  sTest : string;
begin
  for I := 0 to Length(State) -1  do
    sTest := sTest + ' ' + IntToHex(state[I],2);

  ShowMessage(sTest);
end;

procedure TAES.WriteFile(sFileName: string; var arrBytes: Tbytes);
var
  F : File of Byte;
  iCount : integer;
begin
try
  if (sFileName = '') then
      raise Exception.Create('File encryption: No file name given')
    else
      AssignFile(F, sFileName);

  rewrite(F);

  for iCount := 0 to length(arrbytes) -1 do
      BlockWrite(F,arrbytes[iCount],1);

  closeFile(F);

except

end;

end;

{$EndRegion}
{$Region 'Custom encryption' }

function TCustom.Decrypt(sInput, sKey: string) : string;
var 
  arrTbl, arrTemp : array of array of char;
  iRow, iCol, iCount, iTblSize : Integer;
  sOut : string;
begin
  iTblSize := Ceil(sqrt(length(sInput)));

  SetLength(arrTbl,iTblSize,iTblsize);
  SetLength(arrTemp,iTblSize,iTblsize);

  //Populate arrTable from left to right
  iCount := 1;
  for iRow := 0 to iTblSize -1  do
  begin
    for iCol := 0 to iTblSize - 1 do
      begin
        arrTbl[iRow,iCol] := sInput[iCount];
        Inc(iCount);
      end;
  end;

  //reverse order of coloms
  iCount := 0;
  for iRow := 0 to iTblsize - 1 do
  begin
    for icol := iTblSize - 1 Downto 0 do
      begin
        arrTemp[iRow,iCount] := arrTbl[iRow,iCol];
        Inc(iCount);
      end;      
  end;

  //Shift rows back
  for iRow := 0 to iTblsize -1 do
    begin
      for iCol := 0 to iTblsize -1  do
        begin
          arrTemp[iRow,(iRow + iCol) mod iTblSize] := arrTbl[iRow,iCol];
        end;
    end;

    //Read table into a line
  for iRow := 0 to iTblSize -1 do
    for iCol := 0 to iTblSize -1 do
      sOut := sOut + arrTemp[iRow,iCol];  

  Result := sOut;
end;

function TCustom.Encrypt(sInput, sKey: string) : string;
var
  arrTbl, arrTemp : array of array of char;
  iLength,iTblSize, I, K, iRows, iCol: integer;
  sPlain, sEncrypted : string;
begin
  iLength := length(sInput);
  iTblSize := ceil(Sqrt(iLength));

  sPlain := sInput;
  for I := 1 to (sqr(iTblSize) - iLength) do
    sPlain := sPlain + '*';

  SetLength(arrTbl,iTblsize ,iTblsize);
  SetLength(arrTemp,iTblsize ,iTblsize);

  //Set char of input into a table
  K := 1;
  for iCol := 0 to iTblSize - 1 do     //cycle through rows
    begin
      for iRows := 0 to iTblSize - 1 do   //cycle through colums
        begin
          arrTemp[iRows,iCol] := sPlain[K];    //fill table from bottom to top
          Inc(K);
        end;
    end;

    //Shift rows to the left
  for iRows := 0 to iTblsize -1 do
    begin
      for iCol := 0 to iTblSize -1 do
        begin
          arrTbl[iRows,iCol] := arrTemp[iRows,(iRows + iCol) mod iTblSize];
        end;
    end;

  //reverse the order of coloms
  for iRows := 0 to iTblSize -1 do
  begin
     K := 0;
    for iCol := iTblSize -1 downto 0 do
      begin
        arrTemp[iRows,K] := arrTbl[iRows,iCol];
        Inc(K);
      end;
  end;

  //Output
  for iRows := 0 to iTblSize -1 do
  begin
    for iCol := 0 to iTblSize -1 do
      begin
        sEncrypted := sEncrypted + arrTemp[iRows,iCol];
      end;
  end;

  Result := sEncrypted;
end;

procedure TCustom.FileDecrpyt(sFileName : string);
var
  F : File of Byte;
  b : byte;
  arrByte : Tbytes;
  iSize, iCount : integer;
begin
  try
    if (sFileName = '') or (not FileExists(sFileName)) then
      raise Exception.Create('File encryption: No file name given/ File does not exsists')
    else
      AssignFile(F, sFileName);

    Reset(F);

    iSize := FileSize(F); //Determines number of records/bytes in the file
    SetLength(arrByte,iSize); //Set length of dynamic array

    iCount := 0;
    while not Eof(F) do
    begin
      BlockRead(F,b,1); //Reads one byte at a time
      arrByte[iCount] := b;
      Inc(iCount);
    end;

    arrByte := ByteDecrypt(arrByte, 0);

    closefile(F);
    Rewrite(F);

     for iCount := 0 to length(arrbyte) -1 do
      BlockWrite(F,arrbyte[iCount],1);

    closeFile(F);
  except on E: Exception do
  end;
end;

procedure TCustom.FileEncrypt(sFileName : string);
var
  F : File of Byte;
  b : byte;
  arrByte : Tbytes;
  iCount, iSize: integer;
begin
  try
    if (sFileName = '') or (not FileExists(sFileName)) then
      raise Exception.Create('File encryption: No file name given/ File does not exsists')
    else
      AssignFile(F, sFileName);

    Reset(F); // resets pointer and sets 1 byte = 1 record

    iSize := FileSize(F); //Determines number of records/bytes in the file
    SetLength(arrByte,iSize); //Set length of dynamic array

    iCount := 0;
    while not Eof(F) do
    begin
      BlockRead(F,b,1); //Reads one byte at a time
      arrByte[iCount] := b;
      Inc(iCount);
    end;

    arrByte := ByteEncrypt(arrByte, 0);

    closefile(F);
    Rewrite(F);

    for iCount := 0 to length(arrbyte) -1 do
      BlockWrite(F,arrbyte[iCount],1);

    closeFile(F);
    
  except on E: Exception do
  end;
end;

function TCustom.ByteDecrypt(Buffer: Tbytes; pos: integer): Tbytes;       //works
var
  tbl, arrTemp : array of array of byte;
  arrReverse : array of byte;
  iSize, ilength, iCol, iRow : integer;
  I, J: Integer;
begin
  iLength := length(Buffer) - pos;

  if ilength < 4 then//base case
  begin
    setLength(arrReverse,length(Buffer));
    for I := 0 to length(Buffer) do
      arrReverse[I] := buffer[I];

    j := pos;
    for I := length(Buffer) -1 to pos do  //reverse last bytes
      begin
        buffer[J] := arrReverse[I];
        Inc(J);
      end;

      Result := buffer;
      exit;
  end;

  iSize := Floor(Sqrt(ilength));

  SetLength(tbl,iSize,iSize);
  SetLength(arrtemp,iSize,iSize);

  //Read bytes into table from left to right
   I := pos;
  for iRow := 0 to iSize - 1 do
  begin
    for iCol := 0 to iSize -1 do
    begin
      tbl[iRow,iCol] := Buffer[I];
      Inc(I);
    end;
  end;

  //Reverse order of coloms
  for iRow := 0 to iSize -1 do
    begin
      I := 0;
      for iCol := iSize -1  downto 0 do
      begin
        arrTemp[iRow,I] := tbl[iRow,iCol];
        Inc(I);
      end;
    end;

    //Shift Rows
  for iRow := 0 to iSize -1 do
    begin
      for iCol := 0 to iSize -1 do
        begin
          tbl[iRow,(iRow + iCol) mod iSize] := arrTemp[iRow, iCol];
        end;
    end;

     for icol := 0 to iSize -1 do
    begin
      for iRow := 0 to iSize -1 do
        begin
          Buffer[pos] := tbl[iRow,iCol];
          Inc(Pos);
        end;
    end;

    Result := ByteDecrypt(Buffer,pos);

end;

function TCustom.ByteEncrypt(Buffer: TBytes ; pos : integer) : TBytes;   //works
var
  tbl, arrTemp : array of array of byte;
  arrReverse : array of byte;
  iSize, ilength, iCol, iRow : integer;
  I, J: Integer;
begin

  iLength := length(Buffer) - pos;

  if ilength < 4 then//base case
  begin
    setLength(arrReverse,length(Buffer));
    for I := 0 to length(Buffer) do
      arrReverse[I] := buffer[I];
          
    j := pos;
    for I := length(Buffer) -1 to pos do  //reverse last bytes
      begin
        buffer[J] := arrReverse[I];
        Inc(J);
      end;

      Result := buffer;
      exit;
  end;

  iSize := Floor(Sqrt(ilength));

  SetLength(tbl,iSize,iSize);
  SetLength(arrtemp,iSize,iSize);

  //read bytes into table from top to bottom and left to right
  I := pos;
  for iCol := 0 to iSize - 1 do
  begin
    for iRow := 0 to iSize -1 do
    begin
      tbl[iRow,iCol] := Buffer[I];
      Inc(I);
    end;
  end;

  //shift coloms
  for iRow := 0 to iSize -1 do
    begin
      for iCol := 0 to iSize -1 do
        begin
          arrTemp[iRow,iCol] := tbl[iRow, (iRow + iCol) mod iSize];
        end;
    end;

  //Reverse order of coloms
  for iRow := 0 to iSize -1 do
    begin
      I := 0;
      for iCol := iSize -1  downto 0 do
      begin
        tbl[iRow,I] := arrTemp[iRow,iCol];
        Inc(I);
      end;
    end;

  //output bytes into a 1 dim array
  for iRow := 0 to iSize -1 do
    begin
      for iCol := 0 to iSize -1 do
        begin
          Buffer[pos] := tbl[iRow,iCol];
          Inc(Pos);
        end;
    end;

  Result := ByteEncrypt(Buffer,pos);  //recursive action
end;

function TCustom.Decrypt(Input: TBytes): TBytes;
begin
  Result := ByteDecrypt(Input,0);
end;
{$endRegion}
function TCustom.Encrypt(Input: TBytes): TBytes;
begin
  Result := ByteEncrypt(Input,0);
end;

end.
